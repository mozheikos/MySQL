GEEKBRAINS

Студент: Можейко Станислав
Факультет: Python-разработка
Дисциплина: Основы реляционных баз данных. MySQL

КУРСОВОЙ ПРОЕКТ "Разработка системы хранения данных для аггрегатора зубоврачебных клиник"

ПОСЯНИТЕЛЬНАЯ ЗАПИСКА

	Проект представляет собой SQL-основу для ресурса "Агрегатор зубоврачебных услуг г. Санкт-Петербурга".
Проект содержит:
- Таблицы: 11 шт
- Представления: 3 шт
- Процедуры: 3 шт
- Триггеры: 4 шт.

ТАБЛИЦЫ

1) USERS (Пользователи)
Информация о пользователях, зарегистрированных в системе. Регистрация пользователя открывает возможность онлайн-записи на прием.
Внешние ключи отсутствуют, индексирование по id - так как это первичный ключ, дополнительный индекс - составной логин-пароль - уникальная пара, если вдруг я стану хорошим программистом и эта идея будет реализована - пользователей может быть много и индекс облегчит задачи администрирования системы.

2) CLINICS (Клиники)
Информация о клиниках (название, адрес, телефон, дата основания). Внешних ключей нет (первичная таблица). Проиндексировал по названию, так как запрос с фронтэнда скорее всего будет по названию (не будет же пользователь выбирать id).

3) DOCTORS (Доктора)
Информация о врачах (имя, клиника, в которой работает врач, стаж врачебной деятельности). Первичная таблица, внешних ключей нет. Индексы по имени доктора и по клинике (натболее вероятные вводные для поиска). Можно сделать отдельное поле рейтинга, но докторов не так много (по данным ресурса buisnesstat.ru количество врачей-стоматологов в г. Санкт-Петербурге - 4113 человек на 2020 год), таблица рейтингов проиндексирована по id докторов, особого ускорения от этого скорее всего не случится (далеко не все люди сходят к одному и тому же врачу, еще меньше из них зайдут и поставят рейтинг).

4) SERVICES (Услуги)
Перечень стоматологических услуг. Опять таки первичная таблица, без внешних ключей. Пока там всего 5 строк, для примера. В рабочем варианте может разрастись ну допустим до 100-200 записей, небольшой объем, дополнительное индексирование не требуется.

5) CLINIC_SERVICES
Перекрестная таблица, хранящая информацию о услугах, которые оказывает каждая из клиник и цену на услугу для каждой клиники. 2 внешних ключа, соответственно, на id клиники и id услуги. Добавил составной индекс клиника-услуга, хотя он не особо необходим (опять таки небольшое количество строк, но так, потому что могу). Для поля price выбрал тип decimal(8,2): 8 - дает вместимость данных до миллиона, думаю цена на одну услугу такой цифры не достигнет никогда или очень не скоро, а вот 100-200 тысяч рублей - сегодняшняя реальность, 2 - два знача после запятой, цена все таки.

6) CLINIC_FEEDBACK (Отзывы о клиниках)
Таблица, хранящая отзывы о клиниках, с указанием имени пациента, клиники и текста отзыва. Внешний ключ - id клиники, индекс тоже по id клиники, другие варианты поиска вряд ли предвидятся.

7 и 8) CLINIC_RATING, DOCTOR_RATING (рейтинг клиники и доктора соответственно)
Таблицы хранят информацию о проставленных пациентами оценках клиникам и докторам (по шкале от 1 до 5). 2 простых таблицы, внешние ключи на id клиник и докторов соответственно, индексы по ним же. Таблицы преполагают быть большими, но выбор критериев поиска скорее всего будет маленький, больше индексов не нужно.

9) DOCTOR_FEEDBACK (Отзывы о врачах)
Таблица с отзывами о врачах. Структура аналогична таблице CLINIC_FEEDBACK.

10) DOCTORS_PHOTOS (Фотографии докторов)
Служебная таблица, хранятся пути к файлам фотографий для каждого доктора. Внешний ключ и индекс по doctor_id.

11) ORDERS (Заказы)
Зарегистрированный и залогинившийся пользователь может записаться онлайн на прием и информация о записи попадает в эту таблицу.
Присутствует триггер, запрещающий запись от пользователя, не вошедшего в систему. Таблица агрегационная, ссылается сразу на 4 таблицы, на каждую из которых добавлен внешний ключ (на id клиники, доктора, услуги и пользователя) и индекс. 

ПРЕДСТАВЛЕНИЯ

1) VIEW_CLINICS
Представление для таблицы CLINICS, более удобный вывод информации о клиниках + добавлен средний рейтинг каждой клиники

2) VIEW_DOCTORS
Представление для таблицы DOCTORS, по аналогии с клиниками

3) USER_ORDER
Более читаемое представление для просмотра заказов пользователей

ПРОЦЕДУРЫ

1) REGISTRY
процедура вносит регистрационные данные в таблицу USERS. По большому счету, этой процедуры можно и избежать, сделав тоже самое на стороне бэкэнда, в питоне например, но так, я думаю будет лучше по 2 причинам: уменьшена вероятность некорректных данных, облегчена организация взаимодействия БД с бэкэндом. Тело простое: процедура на вход получае данные из формы (логин, пароль, имя и номер телефона). Имя и номер телефона разрешены NULL, в таком случае на имя стоит в таблице users дефолт - аноним, телефон просто пустой. Далее процедура вносит запись в таблицу USERS.

2) LOGIN
Поцедура получает на вход логин и пароль, ищет соответствие в таблице USERS (для чего в таблице сделан составной индекс логин-пароль), далее объявляет переменную @id_user, присваивая ей id найденного пользователя, и переменную @name - присваивает имя из той же строки, имя используется при формировании записи в таблицу orders (осуществление онлайн-записи на прием). В случае отсутствия в таблице USERS искомой пары значение логин-пароль - выбрасывается исключение о неверном логине/пароле. 

3) MAKE_ORDER
собственно процедура формирования онлайн-записи на прием. 

ТРИГГЕРЫ

1) SKILL_CALCULATOR, SKILL_CALCULATOR_UPDATE
триггер, который преобразует, при внесении (обновлении) записи в таблицу DOCTORS, значение стажа в год, когда врач начал практику (в том случае, если при внесении записи не задан год сразу). Это позволяет привести поле "СТАЖ" в единому формату, от данных которого в дальнейшем (в представлении VIEW_DOCTORS) рассчитывается фактический стаж (обновляется в реальном времени)

2) ORDER_LOGIN, ORDER_LOGIN_UPDATE
Триггер, не дающий сформировать онлайн-запись на прием к врачу в случае, если пользователь не залогинился в системе.

